Compiling model...
'compile' took 0.000711 s
Training model...
c:\Users\86189\ScaML-Experiment\results\Explicit_Solution_Example\..\..\models\FNN.py:20: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  result=eq.terminal_condition(x_t,self.net(torch.tensor(x_t)).detach().numpy())
Traceback (most recent call last):
  File "c:\Users\86189\ScaML-Experiment\results\Explicit_Solution_Example\experiment_run.py", line 56, in <module>
    trained_net=optimizer.train("results/Explicit_Solution_Example/model.pth",cycle=40,adam_every=500,lbfgs_every=10,metrics=["l2 relative error","mse"]).net
  File "c:\Users\86189\ScaML-Experiment\results\Explicit_Solution_Example\..\..\optimizers\Adam_LBFGS.py", line 37, in train
    self.model.train(iterations=adam_every, display_every=10)
  File "C:\Users\86189\Anaconda3\lib\site-packages\deepxde\utils\internal.py", line 22, in wrapper
    result = f(*args, **kwargs)
  File "C:\Users\86189\Anaconda3\lib\site-packages\deepxde\model.py", line 636, in train
    self._test()
  File "C:\Users\86189\Anaconda3\lib\site-packages\deepxde\model.py", line 825, in _test
    ) = self._outputs_losses(
  File "C:\Users\86189\Anaconda3\lib\site-packages\deepxde\model.py", line 546, in _outputs_losses
    outs = outputs_losses(inputs, targets, auxiliary_vars)
  File "C:\Users\86189\Anaconda3\lib\site-packages\deepxde\model.py", line 320, in outputs_losses_train
    return outputs_losses(
  File "C:\Users\86189\Anaconda3\lib\site-packages\deepxde\model.py", line 302, in outputs_losses
    outputs_ = self.net(inputs)
  File "C:\Users\86189\Anaconda3\lib\site-packages\torch\nn\modules\module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "C:\Users\86189\Anaconda3\lib\site-packages\torch\nn\modules\module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "c:\Users\86189\ScaML-Experiment\results\Explicit_Solution_Example\..\..\models\FNN.py", line 20, in forward
    result=eq.terminal_condition(x_t,self.net(torch.tensor(x_t)).detach().numpy())
  File "c:\Users\86189\ScaML-Experiment\results\Explicit_Solution_Example\..\..\equations\equations.py", line 58, in terminal_condition
    return (x_t[:,-1] - self.T)*u+self.terminal_constraint(x_t) #need to be enforced on network class
  File "C:\Users\86189\Anaconda3\lib\site-packages\torch\_tensor.py", line 1087, in __array__
    return self.numpy()
RuntimeError: Can't call numpy() on Tensor that requires grad. Use tensor.detach().numpy() instead.